{
    "auth": {
        "oauth2": {
            "scopes": {
                "https://www.googleapis.com/auth/cloud-language": {},
                "https://www.googleapis.com/auth/cloud-platform": {}
            }
        }
    },
    "basePath": "",
    "baseUrl": "https://language.googleapis.com/",
    "batchPath": "batch",
    "canonicalName": "Cloud Natural Language",
    "discoveryVersion": "v1",
    "documentationLink": "https://cloud.google.com/natural-language/",
    "fullyEncodeReservedExpansion": true,
    "icons": {
        "x16": "http://www.google.com/images/icons/product/search-16.gif",
        "x32": "http://www.google.com/images/icons/product/search-32.gif"
    },
    "id": "language:v1",
    "kind": "discovery#restDescription",
    "mtlsRootUrl": "https://language.mtls.googleapis.com/",
    "name": "language",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "parameters": {
        "$.xgafv": {
            "enum": [
                "1",
                "2"
            ],
            "enumDescriptions": [
                "v1 error format",
                "v2 error format"
            ],
            "location": "query",
            "type": "string"
        },
        "access_token": {
            "location": "query",
            "type": "string"
        },
        "alt": {
            "default": "json",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "enumDescriptions": [
                "Responses with Content-Type of application/json",
                "Media download with context-dependent Content-Type",
                "Responses with Content-Type of application/x-protobuf"
            ],
            "location": "query",
            "type": "string"
        },
        "callback": {
            "location": "query",
            "type": "string"
        },
        "fields": {
            "location": "query",
            "type": "string"
        },
        "key": {
            "location": "query",
            "type": "string"
        },
        "oauth_token": {
            "location": "query",
            "type": "string"
        },
        "prettyPrint": {
            "default": "true",
            "location": "query",
            "type": "boolean"
        },
        "quotaUser": {
            "location": "query",
            "type": "string"
        },
        "uploadType": {
            "location": "query",
            "type": "string"
        },
        "upload_protocol": {
            "location": "query",
            "type": "string"
        }
    },
    "protocol": "rest",
    "resources": {
        "documents": {
            "methods": {
                "analyzeEntities": {
                    "flatPath": "v1/documents:analyzeEntities",
                    "httpMethod": "POST",
                    "id": "language.documents.analyzeEntities",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/documents:analyzeEntities",
                    "request": {
                        "$ref": "AnalyzeEntitiesRequest"
                    },
                    "response": {
                        "$ref": "AnalyzeEntitiesResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/cloud-language",
                        "https://www.googleapis.com/auth/cloud-platform"
                    ]
                },
                "analyzeEntitySentiment": {
                    "flatPath": "v1/documents:analyzeEntitySentiment",
                    "httpMethod": "POST",
                    "id": "language.documents.analyzeEntitySentiment",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/documents:analyzeEntitySentiment",
                    "request": {
                        "$ref": "AnalyzeEntitySentimentRequest"
                    },
                    "response": {
                        "$ref": "AnalyzeEntitySentimentResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/cloud-language",
                        "https://www.googleapis.com/auth/cloud-platform"
                    ]
                },
                "analyzeSentiment": {
                    "flatPath": "v1/documents:analyzeSentiment",
                    "httpMethod": "POST",
                    "id": "language.documents.analyzeSentiment",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/documents:analyzeSentiment",
                    "request": {
                        "$ref": "AnalyzeSentimentRequest"
                    },
                    "response": {
                        "$ref": "AnalyzeSentimentResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/cloud-language",
                        "https://www.googleapis.com/auth/cloud-platform"
                    ]
                },
                "analyzeSyntax": {
                    "flatPath": "v1/documents:analyzeSyntax",
                    "httpMethod": "POST",
                    "id": "language.documents.analyzeSyntax",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/documents:analyzeSyntax",
                    "request": {
                        "$ref": "AnalyzeSyntaxRequest"
                    },
                    "response": {
                        "$ref": "AnalyzeSyntaxResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/cloud-language",
                        "https://www.googleapis.com/auth/cloud-platform"
                    ]
                },
                "annotateText": {
                    "flatPath": "v1/documents:annotateText",
                    "httpMethod": "POST",
                    "id": "language.documents.annotateText",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/documents:annotateText",
                    "request": {
                        "$ref": "AnnotateTextRequest"
                    },
                    "response": {
                        "$ref": "AnnotateTextResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/cloud-language",
                        "https://www.googleapis.com/auth/cloud-platform"
                    ]
                },
                "classifyText": {
                    "flatPath": "v1/documents:classifyText",
                    "httpMethod": "POST",
                    "id": "language.documents.classifyText",
                    "parameterOrder": [],
                    "parameters": {},
                    "path": "v1/documents:classifyText",
                    "request": {
                        "$ref": "ClassifyTextRequest"
                    },
                    "response": {
                        "$ref": "ClassifyTextResponse"
                    },
                    "scopes": [
                        "https://www.googleapis.com/auth/cloud-language",
                        "https://www.googleapis.com/auth/cloud-platform"
                    ]
                }
            }
        }
    },
    "rootUrl": "https://language.googleapis.com/",
    "schemas": {
        "AnalyzeEntitiesRequest": {
            "id": "AnalyzeEntitiesRequest",
            "properties": {
                "document": {
                    "$ref": "Document"
                },
                "encodingType": {
                    "enum": [
                        "NONE",
                        "UTF8",
                        "UTF16",
                        "UTF32"
                    ],
                    "enumDescriptions": [
                        "If `EncodingType` is not specified, encoding-dependent information (such as\n`begin_offset`) will be set at `-1`.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-8 encoding of the input. C++ and Go are examples of languages\nthat use this encoding natively.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-16 encoding of the input. Java and JavaScript are examples of\nlanguages that use this encoding natively.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-32 encoding of the input. Python is an example of a language\nthat uses this encoding natively."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AnalyzeEntitiesResponse": {
            "id": "AnalyzeEntitiesResponse",
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "Entity"
                    },
                    "type": "array"
                },
                "language": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AnalyzeEntitySentimentRequest": {
            "id": "AnalyzeEntitySentimentRequest",
            "properties": {
                "document": {
                    "$ref": "Document"
                },
                "encodingType": {
                    "enum": [
                        "NONE",
                        "UTF8",
                        "UTF16",
                        "UTF32"
                    ],
                    "enumDescriptions": [
                        "If `EncodingType` is not specified, encoding-dependent information (such as\n`begin_offset`) will be set at `-1`.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-8 encoding of the input. C++ and Go are examples of languages\nthat use this encoding natively.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-16 encoding of the input. Java and JavaScript are examples of\nlanguages that use this encoding natively.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-32 encoding of the input. Python is an example of a language\nthat uses this encoding natively."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AnalyzeEntitySentimentResponse": {
            "id": "AnalyzeEntitySentimentResponse",
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "Entity"
                    },
                    "type": "array"
                },
                "language": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AnalyzeSentimentRequest": {
            "id": "AnalyzeSentimentRequest",
            "properties": {
                "document": {
                    "$ref": "Document"
                },
                "encodingType": {
                    "enum": [
                        "NONE",
                        "UTF8",
                        "UTF16",
                        "UTF32"
                    ],
                    "enumDescriptions": [
                        "If `EncodingType` is not specified, encoding-dependent information (such as\n`begin_offset`) will be set at `-1`.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-8 encoding of the input. C++ and Go are examples of languages\nthat use this encoding natively.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-16 encoding of the input. Java and JavaScript are examples of\nlanguages that use this encoding natively.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-32 encoding of the input. Python is an example of a language\nthat uses this encoding natively."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AnalyzeSentimentResponse": {
            "id": "AnalyzeSentimentResponse",
            "properties": {
                "documentSentiment": {
                    "$ref": "Sentiment"
                },
                "language": {
                    "type": "string"
                },
                "sentences": {
                    "items": {
                        "$ref": "Sentence"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AnalyzeSyntaxRequest": {
            "id": "AnalyzeSyntaxRequest",
            "properties": {
                "document": {
                    "$ref": "Document"
                },
                "encodingType": {
                    "enum": [
                        "NONE",
                        "UTF8",
                        "UTF16",
                        "UTF32"
                    ],
                    "enumDescriptions": [
                        "If `EncodingType` is not specified, encoding-dependent information (such as\n`begin_offset`) will be set at `-1`.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-8 encoding of the input. C++ and Go are examples of languages\nthat use this encoding natively.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-16 encoding of the input. Java and JavaScript are examples of\nlanguages that use this encoding natively.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-32 encoding of the input. Python is an example of a language\nthat uses this encoding natively."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AnalyzeSyntaxResponse": {
            "id": "AnalyzeSyntaxResponse",
            "properties": {
                "language": {
                    "type": "string"
                },
                "sentences": {
                    "items": {
                        "$ref": "Sentence"
                    },
                    "type": "array"
                },
                "tokens": {
                    "items": {
                        "$ref": "Token"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AnnotateTextRequest": {
            "id": "AnnotateTextRequest",
            "properties": {
                "document": {
                    "$ref": "Document"
                },
                "encodingType": {
                    "enum": [
                        "NONE",
                        "UTF8",
                        "UTF16",
                        "UTF32"
                    ],
                    "enumDescriptions": [
                        "If `EncodingType` is not specified, encoding-dependent information (such as\n`begin_offset`) will be set at `-1`.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-8 encoding of the input. C++ and Go are examples of languages\nthat use this encoding natively.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-16 encoding of the input. Java and JavaScript are examples of\nlanguages that use this encoding natively.",
                        "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-32 encoding of the input. Python is an example of a language\nthat uses this encoding natively."
                    ],
                    "type": "string"
                },
                "features": {
                    "$ref": "Features"
                }
            },
            "type": "object"
        },
        "AnnotateTextResponse": {
            "id": "AnnotateTextResponse",
            "properties": {
                "categories": {
                    "items": {
                        "$ref": "ClassificationCategory"
                    },
                    "type": "array"
                },
                "documentSentiment": {
                    "$ref": "Sentiment"
                },
                "entities": {
                    "items": {
                        "$ref": "Entity"
                    },
                    "type": "array"
                },
                "language": {
                    "type": "string"
                },
                "sentences": {
                    "items": {
                        "$ref": "Sentence"
                    },
                    "type": "array"
                },
                "tokens": {
                    "items": {
                        "$ref": "Token"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ClassificationCategory": {
            "id": "ClassificationCategory",
            "properties": {
                "confidence": {
                    "format": "float",
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClassifyTextRequest": {
            "id": "ClassifyTextRequest",
            "properties": {
                "document": {
                    "$ref": "Document"
                }
            },
            "type": "object"
        },
        "ClassifyTextResponse": {
            "id": "ClassifyTextResponse",
            "properties": {
                "categories": {
                    "items": {
                        "$ref": "ClassificationCategory"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DependencyEdge": {
            "id": "DependencyEdge",
            "properties": {
                "headTokenIndex": {
                    "format": "int32",
                    "type": "integer"
                },
                "label": {
                    "enum": [
                        "UNKNOWN",
                        "ABBREV",
                        "ACOMP",
                        "ADVCL",
                        "ADVMOD",
                        "AMOD",
                        "APPOS",
                        "ATTR",
                        "AUX",
                        "AUXPASS",
                        "CC",
                        "CCOMP",
                        "CONJ",
                        "CSUBJ",
                        "CSUBJPASS",
                        "DEP",
                        "DET",
                        "DISCOURSE",
                        "DOBJ",
                        "EXPL",
                        "GOESWITH",
                        "IOBJ",
                        "MARK",
                        "MWE",
                        "MWV",
                        "NEG",
                        "NN",
                        "NPADVMOD",
                        "NSUBJ",
                        "NSUBJPASS",
                        "NUM",
                        "NUMBER",
                        "P",
                        "PARATAXIS",
                        "PARTMOD",
                        "PCOMP",
                        "POBJ",
                        "POSS",
                        "POSTNEG",
                        "PRECOMP",
                        "PRECONJ",
                        "PREDET",
                        "PREF",
                        "PREP",
                        "PRONL",
                        "PRT",
                        "PS",
                        "QUANTMOD",
                        "RCMOD",
                        "RCMODREL",
                        "RDROP",
                        "REF",
                        "REMNANT",
                        "REPARANDUM",
                        "ROOT",
                        "SNUM",
                        "SUFF",
                        "TMOD",
                        "TOPIC",
                        "VMOD",
                        "VOCATIVE",
                        "XCOMP",
                        "SUFFIX",
                        "TITLE",
                        "ADVPHMOD",
                        "AUXCAUS",
                        "AUXVV",
                        "DTMOD",
                        "FOREIGN",
                        "KW",
                        "LIST",
                        "NOMC",
                        "NOMCSUBJ",
                        "NOMCSUBJPASS",
                        "NUMC",
                        "COP",
                        "DISLOCATED",
                        "ASP",
                        "GMOD",
                        "GOBJ",
                        "INFMOD",
                        "MES",
                        "NCOMP"
                    ],
                    "enumDescriptions": [
                        "Unknown",
                        "Abbreviation modifier",
                        "Adjectival complement",
                        "Adverbial clause modifier",
                        "Adverbial modifier",
                        "Adjectival modifier of an NP",
                        "Appositional modifier of an NP",
                        "Attribute dependent of a copular verb",
                        "Auxiliary (non-main) verb",
                        "Passive auxiliary",
                        "Coordinating conjunction",
                        "Clausal complement of a verb or adjective",
                        "Conjunct",
                        "Clausal subject",
                        "Clausal passive subject",
                        "Dependency (unable to determine)",
                        "Determiner",
                        "Discourse",
                        "Direct object",
                        "Expletive",
                        "Goes with (part of a word in a text not well edited)",
                        "Indirect object",
                        "Marker (word introducing a subordinate clause)",
                        "Multi-word expression",
                        "Multi-word verbal expression",
                        "Negation modifier",
                        "Noun compound modifier",
                        "Noun phrase used as an adverbial modifier",
                        "Nominal subject",
                        "Passive nominal subject",
                        "Numeric modifier of a noun",
                        "Element of compound number",
                        "Punctuation mark",
                        "Parataxis relation",
                        "Participial modifier",
                        "The complement of a preposition is a clause",
                        "Object of a preposition",
                        "Possession modifier",
                        "Postverbal negative particle",
                        "Predicate complement",
                        "Preconjunt",
                        "Predeterminer",
                        "Prefix",
                        "Prepositional modifier",
                        "The relationship between a verb and verbal morpheme",
                        "Particle",
                        "Associative or possessive marker",
                        "Quantifier phrase modifier",
                        "Relative clause modifier",
                        "Complementizer in relative clause",
                        "Ellipsis without a preceding predicate",
                        "Referent",
                        "Remnant",
                        "Reparandum",
                        "Root",
                        "Suffix specifying a unit of number",
                        "Suffix",
                        "Temporal modifier",
                        "Topic marker",
                        "Clause headed by an infinite form of the verb that modifies a noun",
                        "Vocative",
                        "Open clausal complement",
                        "Name suffix",
                        "Name title",
                        "Adverbial phrase modifier",
                        "Causative auxiliary",
                        "Helper auxiliary",
                        "Rentaishi (Prenominal modifier)",
                        "Foreign words",
                        "Keyword",
                        "List for chains of comparable items",
                        "Nominalized clause",
                        "Nominalized clausal subject",
                        "Nominalized clausal passive",
                        "Compound of numeric modifier",
                        "Copula",
                        "Dislocated relation (for fronted/topicalized elements)",
                        "Aspect marker",
                        "Genitive modifier",
                        "Genitive object",
                        "Infinitival modifier",
                        "Measure",
                        "Nominal complement of a noun"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Document": {
            "id": "Document",
            "properties": {
                "content": {
                    "type": "string"
                },
                "gcsContentUri": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        "PLAIN_TEXT",
                        "HTML"
                    ],
                    "enumDescriptions": [
                        "The content type is not specified.",
                        "Plain text",
                        "HTML"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Entity": {
            "id": "Entity",
            "properties": {
                "mentions": {
                    "items": {
                        "$ref": "EntityMention"
                    },
                    "type": "array"
                },
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "salience": {
                    "format": "float",
                    "type": "number"
                },
                "sentiment": {
                    "$ref": "Sentiment"
                },
                "type": {
                    "enum": [
                        "UNKNOWN",
                        "PERSON",
                        "LOCATION",
                        "ORGANIZATION",
                        "EVENT",
                        "WORK_OF_ART",
                        "CONSUMER_GOOD",
                        "OTHER",
                        "PHONE_NUMBER",
                        "ADDRESS",
                        "DATE",
                        "NUMBER",
                        "PRICE"
                    ],
                    "enumDescriptions": [
                        "Unknown",
                        "Person",
                        "Location",
                        "Organization",
                        "Event",
                        "Artwork",
                        "Consumer product",
                        "Other types of entities",
                        "Phone number\n\nThe metadata lists the phone number, formatted according to local\nconvention, plus whichever additional elements appear in the text:\n\n* `number` - the actual number, broken down into sections as per local\nconvention\n* `national_prefix` - country code, if detected\n* `area_code` - region or area code, if detected\n* `extension` - phone extension (to be dialed after connection), if\ndetected",
                        "Address\n\nThe metadata identifies the street number and locality plus whichever\nadditional elements appear in the text:\n\n* `street_number` - street number\n* `locality` - city or town\n* `street_name` - street/route name, if detected\n* `postal_code` - postal code, if detected\n* `country` - country, if detected<\n* `broad_region` - administrative area, such as the state, if detected\n* `narrow_region` - smaller administrative area, such as county, if\ndetected\n* `sublocality` - used in Asian addresses to demark a district within a\ncity, if detected",
                        "Date\n\nThe metadata identifies the components of the date:\n\n* `year` - four digit year, if detected\n* `month` - two digit month number, if detected\n* `day` - two digit day number, if detected",
                        "Number\n\nThe metadata is the number itself.",
                        "Price\n\nThe metadata identifies the `value` and `currency`."
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EntityMention": {
            "id": "EntityMention",
            "properties": {
                "sentiment": {
                    "$ref": "Sentiment"
                },
                "text": {
                    "$ref": "TextSpan"
                },
                "type": {
                    "enum": [
                        "TYPE_UNKNOWN",
                        "PROPER",
                        "COMMON"
                    ],
                    "enumDescriptions": [
                        "Unknown",
                        "Proper name",
                        "Common noun (or noun compound)"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Features": {
            "id": "Features",
            "properties": {
                "classifyText": {
                    "type": "boolean"
                },
                "extractDocumentSentiment": {
                    "type": "boolean"
                },
                "extractEntities": {
                    "type": "boolean"
                },
                "extractEntitySentiment": {
                    "type": "boolean"
                },
                "extractSyntax": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PartOfSpeech": {
            "id": "PartOfSpeech",
            "properties": {
                "aspect": {
                    "enum": [
                        "ASPECT_UNKNOWN",
                        "PERFECTIVE",
                        "IMPERFECTIVE",
                        "PROGRESSIVE"
                    ],
                    "enumDescriptions": [
                        "Aspect is not applicable in the analyzed language or is not predicted.",
                        "Perfective",
                        "Imperfective",
                        "Progressive"
                    ],
                    "type": "string"
                },
                "case": {
                    "enum": [
                        "CASE_UNKNOWN",
                        "ACCUSATIVE",
                        "ADVERBIAL",
                        "COMPLEMENTIVE",
                        "DATIVE",
                        "GENITIVE",
                        "INSTRUMENTAL",
                        "LOCATIVE",
                        "NOMINATIVE",
                        "OBLIQUE",
                        "PARTITIVE",
                        "PREPOSITIONAL",
                        "REFLEXIVE_CASE",
                        "RELATIVE_CASE",
                        "VOCATIVE"
                    ],
                    "enumDescriptions": [
                        "Case is not applicable in the analyzed language or is not predicted.",
                        "Accusative",
                        "Adverbial",
                        "Complementive",
                        "Dative",
                        "Genitive",
                        "Instrumental",
                        "Locative",
                        "Nominative",
                        "Oblique",
                        "Partitive",
                        "Prepositional",
                        "Reflexive",
                        "Relative",
                        "Vocative"
                    ],
                    "type": "string"
                },
                "form": {
                    "enum": [
                        "FORM_UNKNOWN",
                        "ADNOMIAL",
                        "AUXILIARY",
                        "COMPLEMENTIZER",
                        "FINAL_ENDING",
                        "GERUND",
                        "REALIS",
                        "IRREALIS",
                        "SHORT",
                        "LONG",
                        "ORDER",
                        "SPECIFIC"
                    ],
                    "enumDescriptions": [
                        "Form is not applicable in the analyzed language or is not predicted.",
                        "Adnomial",
                        "Auxiliary",
                        "Complementizer",
                        "Final ending",
                        "Gerund",
                        "Realis",
                        "Irrealis",
                        "Short form",
                        "Long form",
                        "Order form",
                        "Specific form"
                    ],
                    "type": "string"
                },
                "gender": {
                    "enum": [
                        "GENDER_UNKNOWN",
                        "FEMININE",
                        "MASCULINE",
                        "NEUTER"
                    ],
                    "enumDescriptions": [
                        "Gender is not applicable in the analyzed language or is not predicted.",
                        "Feminine",
                        "Masculine",
                        "Neuter"
                    ],
                    "type": "string"
                },
                "mood": {
                    "enum": [
                        "MOOD_UNKNOWN",
                        "CONDITIONAL_MOOD",
                        "IMPERATIVE",
                        "INDICATIVE",
                        "INTERROGATIVE",
                        "JUSSIVE",
                        "SUBJUNCTIVE"
                    ],
                    "enumDescriptions": [
                        "Mood is not applicable in the analyzed language or is not predicted.",
                        "Conditional",
                        "Imperative",
                        "Indicative",
                        "Interrogative",
                        "Jussive",
                        "Subjunctive"
                    ],
                    "type": "string"
                },
                "number": {
                    "enum": [
                        "NUMBER_UNKNOWN",
                        "SINGULAR",
                        "PLURAL",
                        "DUAL"
                    ],
                    "enumDescriptions": [
                        "Number is not applicable in the analyzed language or is not predicted.",
                        "Singular",
                        "Plural",
                        "Dual"
                    ],
                    "type": "string"
                },
                "person": {
                    "enum": [
                        "PERSON_UNKNOWN",
                        "FIRST",
                        "SECOND",
                        "THIRD",
                        "REFLEXIVE_PERSON"
                    ],
                    "enumDescriptions": [
                        "Person is not applicable in the analyzed language or is not predicted.",
                        "First",
                        "Second",
                        "Third",
                        "Reflexive"
                    ],
                    "type": "string"
                },
                "proper": {
                    "enum": [
                        "PROPER_UNKNOWN",
                        "PROPER",
                        "NOT_PROPER"
                    ],
                    "enumDescriptions": [
                        "Proper is not applicable in the analyzed language or is not predicted.",
                        "Proper",
                        "Not proper"
                    ],
                    "type": "string"
                },
                "reciprocity": {
                    "enum": [
                        "RECIPROCITY_UNKNOWN",
                        "RECIPROCAL",
                        "NON_RECIPROCAL"
                    ],
                    "enumDescriptions": [
                        "Reciprocity is not applicable in the analyzed language or is not\npredicted.",
                        "Reciprocal",
                        "Non-reciprocal"
                    ],
                    "type": "string"
                },
                "tag": {
                    "enum": [
                        "UNKNOWN",
                        "ADJ",
                        "ADP",
                        "ADV",
                        "CONJ",
                        "DET",
                        "NOUN",
                        "NUM",
                        "PRON",
                        "PRT",
                        "PUNCT",
                        "VERB",
                        "X",
                        "AFFIX"
                    ],
                    "enumDescriptions": [
                        "Unknown",
                        "Adjective",
                        "Adposition (preposition and postposition)",
                        "Adverb",
                        "Conjunction",
                        "Determiner",
                        "Noun (common and proper)",
                        "Cardinal number",
                        "Pronoun",
                        "Particle or other function word",
                        "Punctuation",
                        "Verb (all tenses and modes)",
                        "Other: foreign words, typos, abbreviations",
                        "Affix"
                    ],
                    "type": "string"
                },
                "tense": {
                    "enum": [
                        "TENSE_UNKNOWN",
                        "CONDITIONAL_TENSE",
                        "FUTURE",
                        "PAST",
                        "PRESENT",
                        "IMPERFECT",
                        "PLUPERFECT"
                    ],
                    "enumDescriptions": [
                        "Tense is not applicable in the analyzed language or is not predicted.",
                        "Conditional",
                        "Future",
                        "Past",
                        "Present",
                        "Imperfect",
                        "Pluperfect"
                    ],
                    "type": "string"
                },
                "voice": {
                    "enum": [
                        "VOICE_UNKNOWN",
                        "ACTIVE",
                        "CAUSATIVE",
                        "PASSIVE"
                    ],
                    "enumDescriptions": [
                        "Voice is not applicable in the analyzed language or is not predicted.",
                        "Active",
                        "Causative",
                        "Passive"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Sentence": {
            "id": "Sentence",
            "properties": {
                "sentiment": {
                    "$ref": "Sentiment"
                },
                "text": {
                    "$ref": "TextSpan"
                }
            },
            "type": "object"
        },
        "Sentiment": {
            "id": "Sentiment",
            "properties": {
                "magnitude": {
                    "format": "float",
                    "type": "number"
                },
                "score": {
                    "format": "float",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Status": {
            "id": "Status",
            "properties": {
                "code": {
                    "format": "int32",
                    "type": "integer"
                },
                "details": {
                    "items": {
                        "additionalProperties": {
                            "type": "any"
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TextSpan": {
            "id": "TextSpan",
            "properties": {
                "beginOffset": {
                    "format": "int32",
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Token": {
            "id": "Token",
            "properties": {
                "dependencyEdge": {
                    "$ref": "DependencyEdge"
                },
                "lemma": {
                    "type": "string"
                },
                "partOfSpeech": {
                    "$ref": "PartOfSpeech"
                },
                "text": {
                    "$ref": "TextSpan"
                }
            },
            "type": "object"
        }
    },
    "servicePath": "",
    "title": "Cloud Natural Language API",
    "version": "v1",
    "version_module": true
}